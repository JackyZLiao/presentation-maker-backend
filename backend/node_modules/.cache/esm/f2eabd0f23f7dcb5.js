let fs,express,swaggerUi,bodyParser,cors,InputError,AccessError,swaggerDocument,getEmailFromAuthorization,login,logout,register,getStore,setStore,save;_23f‍.x([["default",()=>_23f‍.o]]);_23f‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_23f‍.w("express",[["default",["express"],function(v){express=v}]]);_23f‍.w("swagger-ui-express",[["default",["swaggerUi"],function(v){swaggerUi=v}]]);_23f‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_23f‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_23f‍.w("./error",[["InputError",["InputError"],function(v){InputError=v}],["AccessError",["AccessError"],function(v){AccessError=v}]]);_23f‍.w("../swagger.json",[["default",["swaggerDocument"],function(v){swaggerDocument=v}]]);_23f‍.w("./service",[["getEmailFromAuthorization",["getEmailFromAuthorization"],function(v){getEmailFromAuthorization=v}],["login",["login"],function(v){login=v}],["logout",["logout"],function(v){logout=v}],["register",["register"],function(v){register=v}],["getStore",["getStore"],function(v){getStore=v}],["setStore",["setStore"],function(v){setStore=v}],["save",["save"],function(v){save=v}]]);

















const corsOrigin ={
  origin:'*', //or whatever port your frontend is using
  credentials:true,            
  optionSuccessStatus:200
}

const app = express();

// Middleware to set Access-Control-Allow-Origin header
app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*"); // Allow requests from any origin
  next();
});

app.use(cors(corsOrigin));
app.use(bodyParser.urlencoded({ extended: true, }));
app.use(bodyParser.json({ limit: '50mb', }));

const catchErrors = fn => async (req, res) => {
  try {
    await fn(req, res);
    save();
  } catch (err) {
    if (err instanceof InputError) {
      res.status(400).send({ error: err.message, });
    } else if (err instanceof AccessError) {
      res.status(403).send({ error: err.message, });
    } else {
      _23f‍.g.console.log(err);
      res.status(500).send({ error: 'A system error ocurred', });
    }
  }
};
/***************************************************************
                       Test Function
***************************************************************/
app.get('/test', (req, res) => {
  res.send('Server is up and running!');
});


/***************************************************************
                       Auth Function
***************************************************************/

const authed = fn => async (req, res) => {
  const email = getEmailFromAuthorization(req.header('Authorization'));
  await fn(req, res, email);
};

app.post('/admin/auth/login', catchErrors(async (req, res) => {
  const { email, password, } = req.body;
  const token = await login(email, password);
  return res.json({ token, });
}));

app.post('/admin/auth/register', catchErrors(async (req, res) => {
  const { email, password, name, } = req.body;
  const token = await register(email, password, name);
  return res.json({ token, });
}));

app.post('/admin/auth/logout', catchErrors(authed(async (req, res, email) => {
  await logout(email);
  return res.json({});
})));

/***************************************************************
                       Store Functions
***************************************************************/

app.get('/store', catchErrors(authed(async (req, res, email) => {
  return res.json({ store: await getStore(email), });
})));

app.put('/store', catchErrors(authed(async (req, res, email) => {
  await setStore(email, req.body.store);
  return res.json({});
})));

/***************************************************************
                       Running Server
***************************************************************/

app.get('/', (req, res) => res.redirect('/docs'));

app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

// const configData = JSON.parse(fs.readFileSync('../frontend/src/config.json'));
// const port = 'BACKEND_PORT' in configData ? configData.BACKEND_PORT : 5000;
const port = process.env.PORT || 5000;
const server = app.listen(port, () => {
  console.log(`Backend is now listening on port ${port}!`);
  console.log(`For API docs, navigate to http://localhost:${port}`);
});

_23f‍.d(server);
